{"version":3,"sources":["logo.svg","serviceWorker.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","App","className","id","ReactDOM","render","document","getElementById","startButton","querySelector","stopButton","resetButton","start$","fromEvent","stop$","interval$","interval","pipe","takeUntil","switchMap","subscribe","x","console","log","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,iICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCISC,MAlBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACjB,4BAAQC,GAAG,SAAX,SACA,4BAAQA,GAAG,QAAX,QACA,yBAAKA,GAAG,SACN,0BAAMA,GAAG,YADX,IAEE,0BAAMA,GAAG,YAFX,IAGE,0BAAMA,GAAG,kBAEX,4BAAQA,GAAG,WAAX,WACA,qDCLPC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEjD,IAAMC,EAAcF,SAASG,cAAc,UACrCC,EAAaJ,SAASG,cAAc,SACpCE,EAAcL,SAASG,cAAc,YAErCG,EAASC,YAAUL,EAAY,SAC/BM,EAAQD,YAAUH,EAAW,SAG7BK,GAFSF,YAAUF,EAAY,SAEnBK,YAAS,MAETD,EAAUE,KAAKC,YAAUJ,IAE7BF,EACDK,KACAE,YAAUJ,IAEVK,WAAU,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,MFsGlC,kBAAmBG,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLT,QAAQS,MAAMA,EAAMC,c","file":"static/js/main.a567c4bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <button id=\"Start\">Start</button>\n       <button id=\"Stop\">Stop</button>\n       <div id=\"clock\">\n         <span id=\"minutes\"></span>:\n         <span id=\"seconds\"></span>:\n         <span id=\"milliseconds\"></span>\n       </div>\n       <button id=\"Restart\">Restart</button>\n       <p>wow this is so cool</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { of,interval,range,timer,fromEvent,iif,from,concat,merge,combineLatest} from 'rxjs';\nimport { mergeMap,map, take,startWith,takeWhile,switchMap,filter,skip,repeat,reduce,tap,takeUntil } from 'rxjs/operators';\nimport * as serviceWorker from './serviceWorker';\nimport { format } from 'date-fns'\nimport { Observable } from 'rxjs';\nimport \"./index.css\";\nimport  App from './App.js';\nimport { fi } from \"date-fns/locale\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nconst startButton = document.querySelector(\"#Start\");\nconst stopButton = document.querySelector(\"#Stop\");\nconst resetButton = document.querySelector(\"#Restart\");\n\nconst start$ = fromEvent(startButton,\"click\");\nconst stop$ = fromEvent(stopButton,\"click\");\nconst reset$ = fromEvent(resetButton,\"click\");\n\nconst interval$ = interval(1000);\n\nconst pausible$ = interval$.pipe(takeUntil(stop$));\n\nconst apps$ = start$\n            .pipe(\n             switchMap(interval$)\n             )\n            .subscribe(x => console.log(x));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}